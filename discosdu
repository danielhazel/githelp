#!/bin/bash
HERE=$(dirname ${BASH_SOURCE[0]})
. ${HERE}/fixpath

if ! checkDANKEY ; then
    exit 1
fi

if ! allcommitted ; then
    >&2 echo "Local status is not safe enough to run this command."
    exit 1
fi

runsdu=$( arg after -runsdu $@ )

# This script commits new schema for the current app to the targeted schema branches
# All the real work is done by sdu and the programs it uses.

checkJiraCredentials

# Check the current branch is okay
branch=$(branch)
appbranch=$(branch)

if [ -z "$branch" ] ; then
    >&2 echo You should run the from within a clone of an apps repo.  No branch found.
    exit 1
fi
if [ "$branch" = "master" -o  "$branch" = "it" -o  "${branch:0:4}" = "rel/" -o "${branch:0:8}" = "versrel/" ] ; then
    if [ "$runsdu" != "y" -a "$runsdu" != "Y" ] ; then
        >&2 echo You should check out a feature branch first.  Current branch is forbidden: ${branch}.  
        exit 1
    else
        >&2 echo Automatic branch naming requires you to check out a feature branch first.  Current branch is not a feature branch - enter a branch name for schema apps: ${branch}.  
        read branch
    fi
fi

# Find the schema branch targeted.
targetschemabranch=
schemarelarg=$( arg after --schema-rel $@ )
barg=$( arg after -b $@ )
brancharg=$( arg after --branch $@ )
corelibarg=$( arg after --corelib $@ )
apparg=$( arg after -a $@ )

allappnames=($(echo $apparg | tr ',' ' '))
numapps=${#allappnames[@]}

if [ -n "$schemarelarg" ] ; then
    targetschemabranch=versrel/$schemarelarg
elif [  -n "$barg" ] ; then
    targetschemabranch="$barg"
elif [  -n "$brancharg" ] ; then
    targetschemabranch="$brancharg"
elif [ -n "$corelibarg" ] ; then
    if [ $corelibarg = dev -o $corelibarg = it ] ; then
        targetschemabranch=$corelibarg
    else
        targetschemabranch=versrel/$corelibarg
    fi
fi
subfolder=$targetschemabranch
if [ -z "$targetschemabranch" ] ; then
    targetschemabranch=dev
fi
subfolder=$targetschemabranch
if [ "$targetschemabranch" = "dev" ] ; then
    targetschemabranch=master
fi

echo Using: targetschemabranch=$targetschemabranch
echo -n "Okay to proceed? [y/n] "
read okay
if [ "$okay" != "y" -a "$okay" != "Y" ] ; then
    echo "Aborting."
    exit 1
fi

# Prepare the schema repo clones with a new branch off the target and clean it with force
evalschema.sh --evalschemasubfolder $subfolder 'prepco "'$targetschemabranch'"'
evalschema.sh --evalschemasubfolder $subfolder 'git clean -f'
evalschema.sh --evalschemasubfolder $subfolder 'git branch -D "'$branch'"' > /dev/null 2>&1
evalschema.sh --evalschemasubfolder $subfolder 'git checkout -b "'$branch'"'

# call sdu with discosdu arguments
# if $@ contains the -runsdu arg, we need to remove that first (otherwise SDU will complain)
argsarray=( "$@" )
new_args_array=()
prev_runsdu=false
for value in "${argsarray[@]}"
do
    if [ "$value" == "-runsdu" ]; then   
        prev_runsdu=true
    elif [ "$prev_runsdu" == true ]; then
        prev_runsdu=false
    else
        new_args_array+=($value)
    fi
done
argsarray=("${new_args_array[@]}")
unset new_args_array

if [ ${numapps} -gt 1 ] ; then
    for appname in "${allappnames[@]}"
    do
        #trim any whitespace from around the appname string
        realappname=${appname/[[:space:]]/""}
        echo '-------------------------------------'
        echo "running SDU for ${realappname}"
        allsduargs="${argsarray[@]}"
        sduargs=(${allsduargs/$apparg/$realappname})
        echo "${sduargs}"
        set -x
        sdu "${sduargs[@]}"
        set +x
        echo '-------------------------------------'
    done
else
    set -x
    sdu "${argsarray[@]}"
    set +x
fi

# Finally push the schema to bitbucket and merge it
if [ "$runsdu" != "y" -a "$runsdu" != "Y" ] ; then
    gitcomment=$(echo $branch | b2m)
else
    if [ "$appbranch" = "master" -o  "$appbranch" = "it" -o  "${appbranch:0:4}" = "rel/" -o  "${appbranch:0:8}" = "versrel/" ] ; then
    	echo "Please enter a commit message"
    	read gitcomment
    else
    	gitcomment=$(echo $branch | b2m)	
    fi
fi
evalschema.sh --evalschemasubfolder $subfolder 'git add .'
evalschema.sh --evalschemasubfolder $subfolder 'git commit -m "'${gitcomment}'"'

difffile=/tmp/allschemadiff$$.diff
difffilefolder=$(dirname $difffile)
difffileleaf=$(basename $difffile)

evalschema.sh --evalschemasubfolder $subfolder 'git show' > $difffile
echo Complete diff is available here for review: $difffile
viewer=$(difffileviewer)

okay=nothingyet
while [ $okay = nothingyet ] ; do
    echo
    echo "(Provide the name of a viewer here if you want me to view diff files with that in future. Default viewer is ${viewer})"
    echo
    echo "Okay to proceed? [y/n] "
    echo -n "[ y (yes) / n (abort) / v (view diff using ${viewer}) ] "
    read okay
    if [ $okay = "v" -o $okay = "V" ] ; then
        okay=nothingyet
        ( cd $difffilefolder ; $viewer $difffileleaf )
    elif [ $okay != 'y' -a $okay != 'Y' -a $okay != 'n' -a $okay != 'N' ] ; then
        setdifffileviewer $okay
        okay=nothingyet
        viewer=$(difffileviewer)
        ( cd $difffilefolder ; $viewer $difffileleaf )
    elif [ "$okay" != "y" -a "$okay" != "Y" ] ; then
        echo "Aborting."
        exit 1
    fi
done

pushschema  -runsdu $runsdu --evalschemasubfolder $subfolder "$targetschemabranch"
